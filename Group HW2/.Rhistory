# Create x matrix (exclude y's from solution)
X.mat <- find.sim.stocks(rho, q, uniqueTickers)[1:(num.stocks*num.stocks)]
t(matrix(X.mat, num.stocks, num.stocks))
}
constructFund(corrMat[1:3,1:3], 2, priceMat[,1:3], sharesMat[,1:3], unique_tickers[1:3], unique_dates)
corrMat[1:3,1:3]
sharesMat[1:3,1:3]
constructFund <- function(rho, q, price, numShares, uniqueTickers, uniqueDates) {
N.days <- dim(numShares)[1]
final.date <- rownames(numShares)[N.days]
num.stocks <- length(uniqueTickers)
V <- numShares[which(rownames(numShares) == final.date),]
# Create x matrix (exclude y's from solution)
X.mat <- find.sim.stocks(rho, q, uniqueTickers)[1:(num.stocks*num.stocks)]
X.mat <- t(matrix(X.mat, num.stocks, num.stocks))
# Calculate weights for each stock j
V
# for (i in 1:num.stocks) {
#
# }
}
constructFund(corrMat[1:3,1:3], 2, priceMat[,1:3], sharesMat[,1:3], unique_tickers[1:3], unique_dates)
constructFund <- function(rho, q, price, numShares, uniqueTickers, uniqueDates) {
N.days <- dim(numShares)[1]
final.date <- rownames(numShares)[N.days]
num.stocks <- length(uniqueTickers)
V <- numShares[which(rownames(numShares) == final.date),]
# Create x matrix (exclude y's from solution)
X.mat <- find.sim.stocks(rho, q, uniqueTickers)[1:(num.stocks*num.stocks)]
X.mat <- t(matrix(X.mat, num.stocks, num.stocks))
# Calculate weights for each stock j
W <- c()
for (i in 1:num.stocks) {
weight <- V %*% X.mat[,i]
W <- append(W,weight)
}
W
}
constructFund(corrMat[1:3,1:3], 2, priceMat[,1:3], sharesMat[,1:3], unique_tickers[1:3], unique_dates)
constructFund <- function(rho, q, price, numShares, uniqueTickers, uniqueDates) {
N.days <- dim(numShares)[1]
final.date <- rownames(numShares)[N.days]
num.stocks <- length(uniqueTickers)
V <- numShares[which(rownames(numShares) == final.date),]
# Create x matrix (exclude y's from solution)
X.mat <- find.sim.stocks(rho, q, uniqueTickers)[1:(num.stocks*num.stocks)]
X.mat <- t(matrix(X.mat, num.stocks, num.stocks))
# Calculate weights for each stock j
W <- c()
for (i in 1:num.stocks) {
weight <- V %*% X.mat[,i]
W <- append(W,weight)
}
totalWeight <- sum(W)
totalWeight
}
constructFund(corrMat[1:3,1:3], 2, priceMat[,1:3], sharesMat[,1:3], unique_tickers[1:3], unique_dates)
constructFund <- function(rho, q, price, numShares, uniqueTickers, uniqueDates) {
N.days <- dim(numShares)[1]
final.date <- rownames(numShares)[N.days]
num.stocks <- length(uniqueTickers)
V <- numShares[which(rownames(numShares) == final.date),]
# Create x matrix (exclude y's from solution)
X.mat <- find.sim.stocks(rho, q, uniqueTickers)[1:(num.stocks*num.stocks)]
X.mat <- t(matrix(X.mat, num.stocks, num.stocks))
# Calculate weights for each stock j
W <- c()
for (i in 1:num.stocks) {
weight <- V %*% X.mat[,i]
W <- append(W,weight)
}
totalWeight <- sum(W)
totalWeight
W <- W / totalWeight
W
}
constructFund(corrMat[1:3,1:3], 2, priceMat[,1:3], sharesMat[,1:3], unique_tickers[1:3], unique_dates)
test.code <- function(n, q) {
constructFund(corrMat[1:n,1:n], q, priceMat[,1:n], sharesMat[,1:n], unique_tickers[1:n], unique_dates)
}
test.code(4,3)
test.code(4,4)
test.code(10,4)
test.code(10,10)
test.code(100,25)
sum(test.code(100,25))
sum(which(test.code(100,25)) > 0)
sum(which(test.code(100,25) > 0))
result <- test.code(100,25)
result
which(result > 0)
length(which(result > 0))
unique_dates
dim(sharesMat)
constructFund <- function(rho, q, price, numShares, uniqueTickers, uniqueDates) {
N.days <- length(uniqueDates)
final.date <- rownames(numShares)[N.days]
num.stocks <- length(uniqueTickers)
V <- numShares[which(rownames(numShares) == final.date),]
# Create x matrix (exclude y's from solution)
X.mat <- find.sim.stocks(rho, q, uniqueTickers)[1:(num.stocks*num.stocks)]
X.mat <- t(matrix(X.mat, num.stocks, num.stocks))
# Calculate weights for each stock j
W <- c()
for (i in 1:num.stocks) {
weight <- V %*% X.mat[,i]
W <- append(W,weight)
}
totalWeight <- sum(W)
W <- W / totalWeight
W
}
test.code <- function(n, q) {
constructFund(corrMat, q, priceMat, sharesMat[,1:n], unique_tickers[1:n], unique_dates)
}
test.code(20,5)
test.code <- function(n, q) {
constructFund(corrMat[1:n], q, priceMat, sharesMat[,1:n], unique_tickers[1:n], unique_dates)
}
test.code(20,5)
priceMat
test.code <- function(n, q) {
constructFund(corrMat[1:n], q, priceMat[,1:n], sharesMat[,1:n], unique_tickers[1:n], unique_dates)
}
test.code(20,5)
test.code <- function(n, q) {
constructFund(corrMat[1:n,1:n], q, priceMat[,1:n], sharesMat[,1:n], unique_tickers[1:n], unique_dates)
}
test.code(20,5)
test.code <- function(n, q) {
constructFund(corrMat[1:n,1:n], q, priceMat[,1:n], sharesMat[,1:n], unique_tickers[1:n], unique_dates)
}
test.code(10,5)
monthlyPriceMat
monthlyPriceMat[,1:10]
base.index <- 2660.93 # NASDAQ on Dec 2012
nasdaq.2013 <- c(2731.53, 2738.58, 2818.69, 2887.44, 2981.76, 2909.60, 3090.19, 3073.81, 3218.20, 3377.73, 3487.82, 3592.00)
length(nasdaq.2013)
nasdaq.2013 <- c(base.index, 2731.53, 2738.58, 2818.69, 2887.44, 2981.76, 2909.60, 3090.19, 3073.81, 3218.20, 3377.73, 3487.82, 3592.00)
for (month in 2:length(nasdaq.2013)) {
return <- (nasdaq.2013[month] / nasdaq.2013[month - 1]) - 1
nasdaq.return <- append(nasdaq.return, )
}
nasdaq.return <- c()
for (month in 2:length(nasdaq.2013)) {
return <- (nasdaq.2013[month] / nasdaq.2013[month - 1]) - 1
nasdaq.return <- append(nasdaq.return, )
}
nasdaq.2013 <- c(base.index, 2731.53, 2738.58, 2818.69, 2887.44, 2981.76, 2909.60, 3090.19, 3073.81, 3218.20, 3377.73, 3487.82, 3592.00)
nasdaq.return <- c()
for (month in 2:length(nasdaq.2013)) {
return <- (nasdaq.2013[month] / nasdaq.2013[month - 1]) - 1
nasdaq.return <- append(nasdaq.return, )
}
base.index <- 2660.93 # NASDAQ on Dec 2012
nasdaq.2013 <- c(base.index, 2731.53, 2738.58, 2818.69, 2887.44, 2981.76, 2909.60, 3090.19, 3073.81, 3218.20, 3377.73, 3487.82, 3592.00)
nasdaq.return <- c()
for (month in 2:length(nasdaq.2013)) {
return <- (nasdaq.2013[month] / nasdaq.2013[month - 1]) - 1
nasdaq.return <- append(nasdaq.return, return)
}
nasdaq.return
monthlyPriceMat[,1:10]
test.code(10,5)
test.code(10,5) %*% monthlyPriceMat[,1:10]
test.code(10,5)
onthlyPriceMat[,1:10]
monthlyPriceMat[,1:10]
test.code(10,5) %*% t(monthlyPriceMat[,1:10])
sharesMat
test.code(10,5) %*% sharesMat[,1:10]
test.code(10,5) %*% t(sharesMat[,1:10])
tail(sharesMat,1)
tail(sharesMat,1) %*% test.code(10,5)
test.code(10,5)
tail(sharesMat,1) %*% c(test.code(10,5))
tail(sharesMat,1) %*% t(test.code(10,5))
tail(sharesMat,1)
dim(tail(sharesMat,1))
test.code(10,5) %*% tail(sharesMat,1)
test.code(10,5) %*% tail(sharesMat[,1:10],1)
tail(sharesMat[,1:10],1) %*% test.code(10,5)
tail(sharesMat[,1:10],1) %*% t(test.code(10,5))
tail(sharesMat[,1:10],1) %*% test.code(10,5)
test.code(10,5) %*% tail(sharesMat[,1:10],1)
test.code(10,5) %*% t(tail(sharesMat[,1:10],1))
sharesMat[,1:10]
tail(sharesMat,1)[1:10]
test.code(10,5) %*% tail(sharesMat,1)[1:10]
tail(sharesMat,1)[1:10] %*% test.code(10,5)
tail(sharesMat,1)[1:10] %*% t(test.code(10,5))
tail(sharesMat,1)[1:10] %*% test.code(10,5)
tail(sharesMat,1)[1:10]
test.code(10,5)
t(tail(sharesMat,1)[1:10]) %*% test.code(10,5)
t(tail(sharesMat,1)[1:10])
dim(t(tail(sharesMat,1)[1:10]))
tail(sharesMat,1)[1:10]
dim(tail(sharesMat,1)[1:10])
tail(sharesMat,1)[1:10] * test.code(10,5)
test.code(10,5)
tail(sharesMat,1)[1:10] %*% c(test.code(10,5))
matrix(tail(sharesMat,1)[1:10], 1,10)
matrix(tail(sharesMat,1)[1:10], 10,1)
matrix(tail(sharesMat,1)[1:10], 10,1) %*% matrix(test.code(10,5), 1, 10)
matrix(tail(sharesMat,1)[1:10], 10,1)
tail(sharesMat,1)[1:10] * test.code(10,5)
setwd("~/Documents/Github/Optimization/Group HW2")
library(lpSolve)
source('constructFund.R')
base.index <- 2660.93 # NASDAQ on Dec 2012
nasdaq.2013 <- c(base.index, 2731.53, 2738.58, 2818.69, 2887.44,
2981.76, 2909.60, 3090.19, 3073.81,
3218.20, 3377.73, 3487.82, 3592.00) # Dec 2012 + 2013 monthly NASDAQ
nasdaq.return <- c() # monthly returns for NASDAQ 2013
for (month in 2:length(nasdaq.2013)) {
return <- (nasdaq.2013[month] / nasdaq.2013[month - 1]) - 1
nasdaq.return <- append(nasdaq.return, return)
}
tail(sharesMat,1)[1:10] * test.code(10,5)
shares.fund <- tail(sharesMat,1)[1:10] * test.code(10,5)
priceMat
tail(priceMat,1)
shares.fund * tail(priceMat,1)
test.code(10,5)
tail(priceMat,1)[1:10]
test.code(10,4)
allocate.funds <- test.code(10,4) * total.funds
total.funds <- 1000000
allocate.funds <- test.code(10,4) * total.funds
allocate.funds
shares.bought <- allocate.funds / tail(priceMat,1)[1:10]
shares.bought
shares.fund <- allocate.funds / tail(priceMat,1)[1:10]
shares.portfolio <- allocate.funds / tail(priceMat,1)[1:10]
shares.portfolio.base <- allocate.funds / tail(priceMat,1)[1:10] # number of shares purchased
shares.portfolio.base
shares.portfolio <- allocate.funds / tail(priceMat,1)[1:10] # number of shares purchased
base.portfolio.value <- sum(shares.portfolio * tail(priceMat,1)[1:10])
base.portfolio.value
base.value <- 1000000
allocate.funds <- test.code(10,4) * base.value # total amount allowed to spend for each stock
shares.portfolio <- allocate.funds / tail(priceMat,1)[1:10] # number of shares purchased
monthlyPriceMat
monthlyPriceMat[1, 1:10]
portfolio.returns <- c()
for (i in 1:12) {
result <- sum(monthlyPriceMat[i, 1:10] * shares.portfolio) # portfolio value at the end of month
portfolio.returns <- append(portfolio.returns, result)
portfolio.returns <- c()
for (i in 1:12) {
result <- sum(monthlyPriceMat[i, 1:10] * shares.portfolio) # portfolio value at the end of month
portfolio.returns <- append(portfolio.returns, result)
}
portfolio.returns
portfolio.returns
portfolio.returns
portfolio.returns <- c()
for (i in 1:12) {
result <- sum(monthlyPriceMat[i, 1:10] * shares.portfolio) # portfolio value at the end of month
portfolio.returns <- append(portfolio.returns, result)
}
portfolio.returns
nasdaq.return
portfolio.returns <- c(base.value)
for (i in 1:12) {
result <- sum(monthlyPriceMat[i, 1:10] * shares.portfolio) # portfolio value at the end of month
portfolio.returns <- append(portfolio.returns, result)
}
portfolio.returns
portfolio.value <- c(base.value)
for (i in 1:12) {
result <- sum(monthlyPriceMat[i, 1:10] * shares.portfolio) # portfolio value at the end of month
portfolio.value <- append(portfolio.value, result)
}
portfolio.return <- c()
for (month in 2:length(portfolio.value)) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- append(portfolio.return, return)
}
portfolio.returns
nasdaq.return
portfolio.return
nasdaq.return
library(ggplot2)
base.value <- 1000000
allocate.funds <- test.code(100,100) * base.value # total amount allowed to spend for each stock
allocate.funds <- test.code(100,100) * base.value # total amount allowed to spend for each stock
shares.portfolio <- allocate.funds / tail(priceMat,1) # number of shares purchased
fund.weights <- test.code(100,100)
nasdaq.2013 <- c(base.index, 2731.53, 2738.58, 2818.69, 2887.44,
2981.76, 2909.60, 3090.19, 3073.81,
3218.20, 3377.73, 3487.82, 3592.00) # Dec 2012 + 2013 monthly NASDAQ
nasdaq.return <- c() # monthly returns for NASDAQ 2013
for (month in 2:length(nasdaq.2013)) {
return <- (nasdaq.2013[month] / nasdaq.2013[month - 1]) - 1
nasdaq.return <- append(nasdaq.return, return)
}
base.value <- 1000000
allocate.funds <-  * base.value # total amount allowed to spend for each stock
allocate.funds <-  fund.weights * base.value # total amount allowed to spend for each stock
shares.portfolio <- allocate.funds / tail(priceMat,1) # number of shares purchased
portfolio.value <- c(base.value)
for (i in 1:12) {
result <- sum(monthlyPriceMat[i,] * shares.portfolio) # portfolio value at the end of month
portfolio.value <- append(portfolio.value, result)
}
portfolio.return <- c()
for (month in 2:length(portfolio.value)) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- append(portfolio.return, return)
}
portfolio.return
nasdaq.return
data.frame(portfolio.return, nasdaq.return)
q4.df <- data.frame(portfolio.return, nasdaq.return)
q4.df
c(portfolio.return)
q4.df <- data.frame(portfolio.return)
q4.df
data.frame(portfolio.return)
q4.df <- data.frame(portfolio.return)
q4.df
q4.df
q4.df
q4.df
q4.df
q4.df
q4.df
q4.df
q4.df <- matrix(portfolio.return)
q4.df
data.frame(c(1,100))
portfolio.return
q4.df <- data.frame(portfolio.return)
q4.df
portfolio.return
return
data.frame(portfolio.return)
data.frame(portfolio.return)
q4.df <- data.frame(nasdaq.return)
q4.df
c(1,100)
c(nasdaq.return)
unlist(nasdaq.return)
dim(nasdaq.return)
q4.df <- matrix(nasdaq.return)
q4.df
q4.df <- cbind(q4.matrix, nasdaq.return)
q4.df <- matrix(nasdaq.return)
q4.df <- cbind(q4.matrix, nasdaq.return)
q4.df <- cbind(q4.df, nasdaq.return)
q4.df <- matrix(portfolio.return)
q4.df <- cbind(q4.df, nasdaq.return)
q4.df
colnames(q4.df) <- c('Portfolio Return','NASDAQ Return')
q4.df
ggplot(data = q4.df, aes(x = rownames(q4.df))) +
geom_line(aes(y = 'Portfolio Return'))
as.data.frame(q4.df)
as.data.frame(q4.df)
as.data.frame(q4.df)
q4.df <- matrix(portfolio.return)
q4.df <- cbind(q4.df, nasdaq.return)
as.data.frame(q4.df)
colnames(q4.df) <- c('Portfolio Return','NASDAQ Return')
q4.df <- matrix(portfolio.return)
q4.df <- cbind(q4.df, nasdaq.return)
as.data.frame(q4.df)
colnames(q4.df) <- c('Portfolio Return','NASDAQ Return')
q4.df <- matrix(portfolio.return)
q4.df <- cbind(q4.df, nasdaq.return)
as.data.frame(q4.df)
colnames(q4.df) <- c('Portfolio Return','NASDAQ Return')
q4.df <- matrix(portfolio.return)
q4.df <- cbind(q4.df, nasdaq.return)
as.data.frame(q4.df)
colnames(q4.df) <- c('Portfolio Return','NASDAQ Return')
q4.df <- matrix(portfolio.return)
q4.df <- cbind(q4.df, nasdaq.return)
as.data.frame(q4.df)
colnames(q4.df) <- c('Portfolio Return','NASDAQ Return')
as.data.frame(q4.df)
q4.df <- as.data.frame(q4.df)
ggplot(data = q4.df, aes(x = rownames(q4.df))) +
geom_line(aes(y = 'Portfolio Return'))
ggplot(data = q4.df, aes(x = rownames(q4.df))) +
geom_line(aes(y = 'Portfolio Return'))
c(1,2,3,4)
portfolio.value <- c(base.value)
for (i in 1:12) {
result <- sum(monthlyPriceMat[i,] * shares.portfolio) # portfolio value at the end of month
portfolio.value <- c(portfolio.value, result)
}
portfolio.value
nasdaq.return <- c() # monthly returns for NASDAQ 2013
# Create monthly returns for NASDAQ
for (month in 2:length(nasdaq.2013)) {
return <- (nasdaq.2013[month] / nasdaq.2013[month - 1]) - 1
nasdaq.return <- c(nasdaq.return, return)
}
q4.df <- data.frame(portfolio.return)
q4.df
portfolio.return
portfolio.return <- c()
for (month in 2:length(portfolio.value)) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- c(portfolio.return, return)
}
q4.df <- data.frame(portfolio.return)
q4.df
ortfolio.return
portfolio.return
portfolio.return <- c()
for (month in 2:length(portfolio.value)) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- c(portfolio.return, return)
}
portfolio.return
portfolio.value
portfolio.value <- c(base.value)
for (i in 1:12) {
result <- sum(monthlyPriceMat[i,] * shares.portfolio) # portfolio value at the end of month
portfolio.value <- c(portfolio.value, result)
}
portfolio.value[2] / portfolio.value[1]
c(portfolio.value[2] / portfolio.value[1])
sum(portfolio.value[2] / portfolio.value[1])
data.frame(portfolio.value)
sum(monthlyPriceMat[1,] * shares.portfolio)
portfolio.return <- c()
for (month in 2:length(portfolio.value)) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- c(portfolio.return, return)
}
q4.df <- data.frame(portfolio.return)
q4.df
q4.df <- as.data.frame(q4.df)
q4.df
for (month in 2:12) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- c(portfolio.return, return)
}
q4.df <- data.frame(portfolio.return)
q4.df
portfolio.return
portfolio.return <- c()
for (month in 2:12) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- c(portfolio.return, return)
}
portfolio.return
plot(portfolio.return)
lines(portfolio.return)
lines(nasdaq.return)
plot()
length(portfolio.return)
length(nasdaq.return)
nasdaq.return <- c() # monthly returns for NASDAQ 2013
# Create monthly returns for NASDAQ
for (month in 2:length(nasdaq.2013)) {
return <- (nasdaq.2013[month] / nasdaq.2013[month - 1]) - 1
nasdaq.return <- c(nasdaq.return, return)
}
nasdaq.return
for (month in 2:12) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- c(portfolio.return, return)
}
portfolio.return
portfolio.return <- c()
for (month in 2:12) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- c(portfolio.return, return)
}
portfolio.return
portfolio.return <- c()
for (month in 2:length(portfolio.value)) {
return <- (portfolio.value[month] / portfolio.value[month - 1]) - 1
portfolio.return <- c(portfolio.return, return)
}
portfolio.return
q4.df <- data.frame(portfolio.return)
q4.df
type(portfolio.return)
typeof(portfolio.return)
as.data.frame(portfolio.return)
q4.df <- as.data.frame(portfolio.return)
q4.df <- cbind(q4.df, nasdaq.return)
q4.df
q4.df
q4.df <- as.data.frame(portfolio.return)
q4.df
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
as.data.frame(portfolio.return)
